"""
Django settings for Bookingapp_1969 project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import boto3
import environ
import firebase_admin

from pathlib import Path
from datetime import timedelta
from firebase_admin import credentials

env = environ.Env()
environ.Env.read_env()




BASE_DIR = Path(__file__).resolve().parent.parent
CORE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = env('SECRET_KEY')
DEBUG = env.bool('DEBUG')
APPLE_CERTIFICATE_KEY = None
key_path = env('SOCIAL_AUTH_APPLE_CERTIFICATE_KEY')
if key_path:
    with open(os.path.join(BASE_DIR, key_path), 'r') as f:
        APPLE_CERTIFICATE_KEY = f.read()
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS') + ['16.171.140.73', '16.171.140.73:8002','95.217.217.207','95.217.217.207:3000','test.1929way.dgitcom.com','hotels.1929way.app','13.229.243.239:8000','13.229.243.239']
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS')

INSTALLED_APPS = [
    # Django Default Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-Party Apps
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'django_filters',
    'corsheaders',
    'storages',
    'boto3',
    'botocore',
    'channels',

    # Django-Allauth for Authentication
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.apple',  # <-- Add this line
    'django.contrib.sites',

    # Custom Apps
    'user',
    'common',
    'vendor',
    'chalets',
    'logs',
    'privatepolicy',
    'superuserapp',
    'api'
]

SITE_ID = 1



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env('SOCIAL_AUTH_GOOGLE_KEY'),
            'secret': env('SOCIAL_AUTH_GOOGLE_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'APP': {
            'client_id': env('SOCIAL_AUTH_FACEBOOK_KEY'), 
            'secret': env('SOCIAL_AUTH_FACEBOOK_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'email',
            'public_profile',
        ],
        'AUTH_PARAMS': {
            'auth_type': 'reauthenticate'
        }
    },
    'apple': {
        'APP': {
            'client_id': env('SOCIAL_AUTH_APPLE_CLIENT_ID'),
            'secret': env('SOCIAL_AUTH_APPLE_SECRET'),
            'key': env('SOCIAL_AUTH_APPLE_KEY'),
            'certificate_key': APPLE_CERTIFICATE_KEY,
            'team_id': env('SOCIAL_AUTH_APPLE_TEAM_ID'),
            'service_id': env('SOCIAL_AUTH_APPLE_SERVICE_ID'),
        },
        'SCOPE': [
            'name',
            'email',
        ],
    }
}

AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

AUTH_USER_MODEL = 'user.User'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'optional'
LOGIN_REDIRECT_URL = '/'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'api.middleware.Handle500ErrorMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.middleware.locale.LocaleMiddleware',
    'vendor.middleware.LanguageMiddleware', 
    'allauth.account.middleware.AccountMiddleware',

]

CORS_ALLOWED_ORIGINS = [
    "https://test.1929way.dgitcom.com",
    "https://hotels.1929way.app",
    "http://localhost:8000",
    "http://127.0.0.1:8000"
]


SESSION_ENGINE = env('SESSION_ENGINE')

ROOT_URLCONF = env('ROOT_URLCONF')
TEMPLATE_DIRS1 = os.path.join(CORE_DIR, "vendor/templates")
TEMPLATE_DIRS2 = os.path.join(CORE_DIR, "chalets/templates")
TEMPLATE_DIRS3 = os.path.join(CORE_DIR, "templates")
TEMPLATE_DIRS4 = os.path.join(CORE_DIR, "common/templates")

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIRS1, TEMPLATE_DIRS2, TEMPLATE_DIRS3, TEMPLATE_DIRS4],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION='Bookingapp_1969.wsgi.application'
ASGI_APPLICATION='Bookingapp_1969.asgi.application'


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    }
}

DATABASES = {
   'default': {
       'ENGINE': env('DB_ENGINE'),
       'NAME': env('DB_NAME'),
       'USER':env('DB_USER'),
       'PASSWORD': env('DB_PASSWORD'),
       'HOST': env('DB_HOST'),
       'PORT': env('DB_PORT'),
   }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




LANGUAGE_CODE = env('LANGUAGE_CODE')

TIME_ZONE = 'Asia/Muscat'

USE_I18N = env('USE_I18N')

USE_TZ = True

STATIC_URL = env('STATIC_URL')

DEFAULT_AUTO_FIELD = env('DEFAULT_AUTO_FIELD')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'EXCEPTION_HANDLER': 'api.utils.custom_exception_handler'
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
}


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

MEDIA_URL = env('MEDIA_URL')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

EMAIL_BACKEND = env('EMAIL_BACKEND')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = int(env('EMAIL_PORT'))

if EMAIL_PORT == 465:
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = True
elif EMAIL_PORT == 587:
    EMAIL_USE_TLS = True
    EMAIL_USE_SSL = False
else:
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False 
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
SUPER_ADMIN_EMAIL = env('SUPER_ADMIN_EMAIL')

LANGUAGES = [
    ('ar', 'Arabic'),
    ('en', 'English'),
]

USE_L10N = env('USE_L10N')

TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = env('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = env('TWILIO_PHONE_NUMBER')

LOGIN_URL = env('LOGIN_URL')

LOGS_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)
LOGGING = {
    'version': 1,
    'loggers': {
        'lessons': {
            'handlers': ['file'],
            'level': 'INFO',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR,"debug.log"),
            'when': 'D',
            'interval': 1,
            'backupCount': 5,
            'formatter': 'app',
        },
    },
    'formatters': {
        'app': {
            'format': (
                u"%(asctime)s [%(levelname)-8s] "
                "(%(module)s.%(funcName)s.%(lineno)d) %(message)s"
            ),
            'datefmt': "%Y-%m-%d %H:%M:%S",
        },
    },
}

# import logging
# logger = logging.getLogger('lessons')
# logger.info("")

# AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
# AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN')
# AWS_S3_REGION_NAME=env('AWS_S3_REGION_NAME')
# AWS_S3_SIGNATURE_VERSION =env('AWS_S3_SIGNATURE_VERSION')
# # AWS_QUERYSTRING_AUTH = True  # To generate signed URLs
# # AWS_S3_OBJECT_PARAMETERS = {
# #     'CacheControl': 'max-age=86400',
# #     'Expires': 'Tue, 1 Jan 2030 00:00:00 GMT',
# # }
# # AWS_QUERYSTRING_EXPIRE = 3600 
# AWS_LOCATION = env('AWS_LOCATION')
# AWS_DEFAULT_ACL = None
# AWS_S3_FILE_OVERWRITE = False

# MEDIA_DIRECTORY = "/media/"
# if AWS_S3_CUSTOM_DOMAIN:
#     if AWS_LOCATION:
#         STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
#     else:
#         STATIC_URL = 'https://%s/' % (AWS_S3_CUSTOM_DOMAIN)
#     STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#     DEFAULT_FILE_STORAGE = 'Bookingapp_1969.storages.MediaStorage'  
#     S3_URL = "https://%s" % AWS_S3_CUSTOM_DOMAIN
#     MEDIA_URL = S3_URL + MEDIA_DIRECTORY



AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = env("AWS_S3_URL")
MINIO_ACCESS_URL = env("MINIO_ACCESS_URL")

# Static files settings
STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/static/"
STATICFILES_STORAGE = "Bookingapp_1969.storages.StaticS3Boto3Storage"

# Media files settings
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/media/"
DEFAULT_FILE_STORAGE = "Bookingapp_1969.storages.MediaStorage"
AWS_QUERYSTRING_AUTH = False



  
PASSWORD_RESET_TIMEOUT = 120

CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Replace with your broker URL if needed
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Replace with your backend if needed

GOOGLE_MAPS_API_KEY=env('GOOGLE_MAPS_API_KEY')
DOMAIN_NAME = env('DOMAIN_NAME')


CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Replace with your broker URL if needed
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Replace with your backend if needed


#NBO payment credentials
NBO_GATEWAY_URL = env('NBO_GATEWAY_URL')
NBO_MERCHANT_ID = env('NBO_MERCHANT_ID')
NBO_ENCRYPTION_KEY = env('NBO_ENCRYPTION_KEY')  
NBO_TRANSPORTAL_ID = env('NBO_TRANSPORTAL_ID')
NBO_TRANSPORTAL_PASSWORD = env('NBO_TRANSPORTAL_PASSWORD')
NBO_RESPONSE_URL = env('NBO_RESPONSE_URL')
NBO_ERROR_URL = env('NBO_ERROR_URL')  
NBO_IV = env('NBO_IV')
NBO_ENDPOINT = env('NBO_ENDPOINT')

ADMIN_EMAIL = env('ADMIN_EMAIL')
SECONDRY_ADMIN_MAIL = env('SECONDRY_ADMIN_MAIL')



# Path to the Firebase service account key JSON file
FIREBASE_CREDENTIALS = env('FIREBASE_CREDENTIALS')

# Initialize Firebase Admin
cred = credentials.Certificate(FIREBASE_CREDENTIALS)
firebase_admin.initialize_app(cred)



